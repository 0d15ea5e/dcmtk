#define YY_CHAR unsigned char
#line 1 "flexskel.cc"
/* A lexical scanner generated by flex */
/* scanner skeleton version:
 */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */
/* institutional financial group  */

/* theses symbols are added before this file */
/* #define YY_CHAR 'unsigned char' if 8bit or 'char' if 7bit */
/* #define FLEX_DEBUG if debug mode */
#define FLEX_SCANNER
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
/* Old MSC, before c7 */
#ifdef MSDOS
#ifndef _MSDOS
#define _MSDOS
#endif
#endif
/* turboc */
#ifdef __MSDOS__
#ifndef _MSDOS
#define _MSDOS
#endif
#endif

#ifdef __cplusplus
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#ifndef _MSDOS
/* #include <osfcn.h> */
/*  We should avoid this file because most systems don't support it
    and we don't need it anyway. */
#endif
#else   /* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
int read();
#else
#include <stdlib.h>
#endif  /* __GNUC__ */
#define YY_USE_PROTOS
#define YY_USE_CONST
#endif  /* __STDC__ */
#endif  /* ! __cplusplus */
#ifdef __TURBOC__
#define YY_USE_CONST
#endif
#include <stdio.h>


/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
/* the "const" storage-class-modifier is valid */
#ifndef YY_USE_CONST
#define const
#endif
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif


/*********************/
/* parameters        */

/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif
/* size of default input buffer */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) 
#endif

/***********************************/
/* to be redefined for application */

/* returned upon end-of-file */
#define YY_END_TOK 0
/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* code executed at the end of each rule */
#define YY_BREAK break;

/* #define YY_USER_ACTION */
/* #define YY_USER_INIT */


#ifndef YY_USE_CLASS
/* copy whatever the last rule matched to the standard output */
/* cast to (char *) is because for 8-bit chars, yy___text is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yy___text, yy___leng, 1, yy___out )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifdef _MSDOS
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread(buf,1,max_size,yy___in)) < 0 ) \
	    YY_FATAL_ERROR( "fread() in flex scanner failed" );
#else
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yy___in), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );

#endif
/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 *      if ( something_happens )
 *              YY_FATAL_ERROR( "oops, the something happened" );
 *      else
 *              everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, yy___stderr  ); \
		(void) putc( '\n', yy___stderr  ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1


/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 
#else 
/* c++ */
#define ECHO yy___echo()
#define YY_INPUT(buf,result,max_size) \
	if ( yy___input((char *)buf, result,max_size) < 0 ) \
	    YY_FATAL_ERROR( "YY_INPUT() in flex scanner failed" );

#define YY_FATAL_ERROR(msg) yy___fatal_error(msg)
#define yywrap() yy___wrap()

#endif
/***********************************/
/* not to be changed */
#define YY_NULL 0
#define YY_END_OF_BUFFER_CHAR 0
/* special action meaning "start processing a new file" */
#define YY_NEW_FILE yy___newfile 
/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)



/* % section 1 definitions go here */ 
#line 1 "vrscan.l"
#define INITIAL 0
/*
 *
 *  Copyright (C) 1997-2000, OFFIS
 *
 *  This software and supporting documentation were developed by
 *
 *    Kuratorium OFFIS e.V.
 *    Healthcare Information and Communication Systems
 *    Escherweg 2
 *    D-26121 Oldenburg, Germany
 *
 *  THIS SOFTWARE IS MADE AVAILABLE,  AS IS,  AND OFFIS MAKES NO  WARRANTY
 *  REGARDING  THE  SOFTWARE,  ITS  PERFORMANCE,  ITS  MERCHANTABILITY  OR
 *  FITNESS FOR ANY PARTICULAR USE, FREEDOM FROM ANY COMPUTER DISEASES  OR
 *  ITS CONFORMITY TO ANY SPECIFICATION. THE ENTIRE RISK AS TO QUALITY AND
 *  PERFORMANCE OF THE SOFTWARE IS WITH THE USER.
 *
 */
#define YY_vrscan_FLEX_SCANNER
#include "vrscan.h"
#line 109 "vrscan.l"
#line 198 "flexskel.cc"

#define yy___stderr YY_vrscan_ERRFILE
#define yy___text YY_vrscan_TEXT
#define yy___leng YY_vrscan_LENG
#define yy___in YY_vrscan_IN
#define yy___out YY_vrscan_OUT
#define yy___newfile \
	do \
		{ \
		YY_vrscan_INIT_BUFFER( YY_vrscan_CURRENT_BUFFER, yy___in ); \
		YY_vrscan_LOAD_BUFFER_STATE(); \
		} \
	while ( 0 )
#if YY_vrscan_DEBUG != 0
#define yy___flex_debug YY_vrscan_DEBUG_FLAG
#endif


#ifdef YY_USE_CLASS

#define yy___echo YY_vrscan_ECHO
#define yy___input YY_vrscan_INPUT
#define yy___fatal_error YY_vrscan_FATAL_ERROR
#define yy___wrap YY_vrscan_WRAP

#endif

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yy___text
 */
#define YY_DO_BEFORE_ACTION \
	yy___text = yy_bp; \
/* % code to fiddle yy___text and yy___leng for yymore() goes here */ \
	yy___leng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yy___text */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yy___text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yy___text )



struct yy_buffer_state
    {
    YY_vrscan_IFILE  *yy_input_file;

    YY_vrscan_CHAR *yy_ch_buf;               /* input buffer */
    YY_vrscan_CHAR *yy_buf_pos;      /* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters */
    int yy_buf_size;    

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;          /* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */

#ifndef YY_USE_CLASS

#if YY_vrscan_DEBUG != 0
int YY_vrscan_DEBUG_FLAG=YY_vrscan_DEBUG_INIT;
#endif
#define YY_CURRENT_BUFFER YY_vrscan_CURRENT_BUFFER
static YY_BUFFER_STATE YY_vrscan_CURRENT_BUFFER;
/* yy_hold_char holds the character lost when yy___text is formed */
static YY_vrscan_CHAR yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */

/* GLOBAL */
YY_vrscan_CHAR *yy___text;
int yy___leng;

YY_vrscan_IFILE  *yy___in = (YY_vrscan_IFILE  *) 0;
YY_vrscan_OFILE *yy___out = (YY_vrscan_OFILE  *) 0;

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_vrscan_CHAR *yy_c_buf_p = (YY_vrscan_CHAR *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yy___in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_vrscan_CHAR c, YY_vrscan_CHAR *buf_ptr ));

#else
/* c++ */
#ifndef YY_vrscan_ECHO_NOCODE
void YY_vrscan_CLASS::yy___echo()
{YY_vrscan_ECHO_CODE
}
#endif
#ifndef YY_vrscan_INPUT_NOCODE
int  YY_vrscan_CLASS::yy___input(char * buffer,int &result,int max_size)
{YY_vrscan_INPUT_CODE
}
#endif
#ifndef YY_vrscan_FATAL_ERROR_NOCODE
void YY_vrscan_CLASS::yy___fatal_error(char *msg)
{YY_vrscan_FATAL_ERROR_CODE
}
#endif
#ifndef YY_vrscan_WRAP_NOCODE
int  YY_vrscan_CLASS::yy___wrap()
{YY_vrscan_WRAP_CODE
}
#endif
void YY_vrscan_CLASS::yy_initialize()
{
 yy___in=0;yy___out=0;yy_init = 1;
 yy_start=0;
 yy___text=0;yy___leng=0;
 YY_vrscan_CURRENT_BUFFER=0;
 yy_did_buffer_switch_on_eof=0;
 yy_c_buf_p=0;yy_hold_char=0;yy_n_chars=0;
#if YY_vrscan_DEBUG != 0
 YY_vrscan_DEBUG_FLAG=YY_vrscan_DEBUG_INIT;
#endif
}

YY_vrscan_CLASS::YY_vrscan_CLASS(YY_vrscan_CONSTRUCTOR_PARAM) YY_vrscan_CONSTRUCTOR_INIT
{yy_initialize();
 YY_vrscan_CONSTRUCTOR_CODE;
}
YY_vrscan_CLASS::~YY_vrscan_CLASS() 
{YY_vrscan_DESTRUCTOR_CODE;
 if(YY_vrscan_CURRENT_BUFFER)
  YY_vrscan_DELETE_BUFFER(YY_vrscan_CURRENT_BUFFER);
}

#endif


#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

/* % data tables for the DFA go here */ 
#define YY_END_OF_BUFFER 17
typedef int yy_state_type;
static const short int yy_accept[308] =
    {   0,
        0,    0,   17,   15,   16,   15,   15,   15,   15,   15,
       15,   15,   15,   13,    0,    0,    0,    0,    0,    0,
        0,   14,   11,    0,    0,   13,   13,    0,   10,   10,
        0,    0,    0,    0,    6,    0,    0,    0,    8,   12,
       12,   12,    0,   14,   14,   11,   11,   11,   11,    0,
        9,   13,    0,   10,    0,   10,    0,    6,    6,    6,
        6,    0,    0,    0,    8,    0,   12,    0,   12,    0,
       12,   14,   11,   11,   11,   11,    4,    0,    0,    0,
       10,   10,    0,    0,    6,    0,    0,    0,    0,    0,
        6,    0,    0,    0,    8,   12,   12,   12,    0,   12,

       12,   12,    0,   11,   11,   11,   11,   11,    4,    0,
        0,    0,    9,    1,   10,   10,    0,    0,    0,    6,
        6,    6,    6,    6,    0,    0,    8,   12,   12,    0,
       12,   12,   12,    0,   12,   11,   11,   11,   11,   11,
       11,    4,    0,    0,    0,    0,    0,    0,    6,    6,
        0,    6,    0,    0,    0,   11,   11,   11,   11,   11,
       11,    0,    0,    0,    4,    0,    0,    0,    0,    0,
        6,    0,   11,   11,   11,   11,    4,    0,    4,    0,
        0,    0,    0,    6,    6,    0,    0,    0,    4,    0,
        0,    2,    0,    4,    0,    0,    1,    0,    0,    0,

        4,    0,    4,    3,    0,    7,    4,    0,    0,    0,
        0,    7,    0,    0,    0,    4,    0,    4,    0,    0,
        0,    7,    0,    4,    0,    4,    0,    0,    0,    0,
        0,    4,    0,    4,    0,    0,    0,    7,    0,    0,
        4,    0,    0,    7,    0,    0,    5,    4,    0,    0,
        7,    7,    0,    5,    0,    4,    0,    2,    7,    0,
        0,    0,    7,    0,    0,    0,    7,    0,    0,    0,
        7,    0,    0,    3,    7,    7,    0,    7,    0,    0,
        0,    0,    7,    0,    0,    0,    0,    0,    7,    0,
        7,    0,    0,    7,    7,    0,    7,    0,    7,    0,

        7,    0,    7,    5,    7,    5,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    3,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    1,    1,    1,
        1,    4,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    6,    5,    6,    7,    5,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    9,    5,    5,
        5,    5,    5,    5,   10,   10,   10,   11,   12,   10,
       10,   10,   10,   10,   10,   10,   11,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   11,   10,   11,   10,
        5,   13,    5,   14,   10,    5,   15,    5,   16,   17,

       18,    5,    5,    5,   19,    5,    5,   20,   21,   22,
       23,   24,    5,    5,   25,   26,   27,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,

       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28
    } ;

static const YY_CHAR yy_meta[29] =
    {   0,
        1,    2,    2,    3,    4,    4,    4,    3,    4,    3,
        3,    3,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    2
    } ;

static const short int yy_base[321] =
    {   0,
        0,   26,  530,  932,  932,    0,  504,    6,  503,    7,
      505,  505,  501,  515,  510,  513,  508,    0,  507,    5,
       53,  510,   66,  505,  499,  502,  501,  496,    1,  499,
      494,   30,   15,  493,   77,  492,   43,  486,   31,   58,
       95,  108,   62,  489,  488,  121,  135,  149,  163,  483,
       65,  486,  481,    0,  484,  483,  473,  174,   70,  189,
        0,  474,   96,  471,   73,  109,   75,  207,  220,  233,
      246,  474,  259,  273,  287,  301,  166,  466,  465,  460,
       78,  461,  455,  453,   51,  452,  440,  112,   53,  436,
      312,  435,  122,  429,  168,   88,  330,  343,  130,  101,

      356,  369,  143,  382,  396,  410,  424,  438,  144,  428,
      427,  426,  134,  420,    0,  428,   86,  423,  422,  176,
      449,  155,  464,    0,  423,  415,  156,  158,  482,  495,
      508,  181,  521,  534,  547,  560,  574,  588,  602,  616,
      630,  187,  414,  413,  412,  411,  410,  409,  304,  305,
      410,   99,  409,  401,  400,  644,  658,  672,  686,  700,
      714,  202,  399,  397,  441,  397,  396,  395,  394,  393,
      442,  387,  728,  742,  756,  770,  225,  386,  186,  385,
      384,  384,  382,  443,  456,  381,  380,  379,  462,  370,
      372,  366,  370,  772,  370,  368,  362,  366,  360,  359,

      773,  358,  238,  352,  356,  783,  775,  355,  354,  353,
      347,  213,  346,  345,  344,  786,  343,  789,  342,  341,
      340,  797,  334,  796,  333,  803,  332,  331,  330,  329,
      328,  202,  327,  804,  321,  320,  319,  251,  318,  314,
      810,  314,  303,  214,  302,  291,  226,  811,  288,  287,
      227,  821,  286,  239,  274,  240,  273,  267,  822,  260,
      259,  259,  832,  246,  232,  220,  833,  217,  206,  205,
      843,  204,  190,  183,  265,  844,  179,  266,  175,  165,
      153,  150,  854,  147,  146,  132,  127,  121,  279,  119,
      252,   79,   68,  280,  855,   40,  865,   32,  866,   21,

      876,    4,  877,  293,  294,  310,  932,  890,  892,    7,
      896,  899,  903,  907,    0,  911,  915,  919,  923,  927
    } ;

static const short int yy_def[321] =
    {   0,
      308,  308,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  309,  307,  310,  307,  307,  307,  307,
      311,  312,  313,  307,  307,  309,  309,  307,  310,   29,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      311,  311,  311,  312,  312,  313,  313,  313,  314,  307,
      307,  309,  307,   29,  315,   29,  307,  307,  307,  307,
       35,  307,  307,  307,  307,  307,  307,  316,  311,  317,
      311,  312,  314,  314,  314,  318,  307,  307,  307,  307,
      315,   81,  307,  307,   35,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  316,  316,  316,  307,

      317,  317,  317,  318,  318,  318,  318,  319,  307,  307,
      307,  307,  307,  307,   81,   81,  307,  307,  307,  307,
      307,  307,  307,   91,  307,  307,  307,  307,  316,  316,
      316,  307,  317,  317,  317,  319,  319,  319,  319,  319,
      320,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,   91,  307,  307,  307,  320,  320,  320,  320,  320,
      320,  320,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  320,  320,  320,  320,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,

      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,

      307,  307,  307,  307,  307,  307,    0,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307
    } ;

static const short int yy_nxt[961] =
    {   0,
      307,    5,   82,   32,   54,   33,   34,   35,   37,   30,
       38,  304,   39,   55,    6,    7,    8,   14,    9,   10,
       17,   34,   35,   11,   15,   12,   13,    5,  302,   21,
       18,   19,   22,   32,   65,   33,   34,   35,   39,  300,
        6,    7,    8,   66,    9,   10,   37,  298,   38,   11,
       39,   12,   13,   40,   40,   40,   41,  307,   85,   90,
       91,   67,   40,   40,   40,   43,   46,   46,   46,   47,
       68,   78,   51,   59,   43,  296,   65,   79,   67,   49,
       59,  115,   63,   60,   61,   66,  295,   68,   62,   63,
       55,  128,  147,  148,   62,   40,   40,   40,   69,   88,

       68,   89,   90,   91,  132,  307,  152,   70,   40,   40,
       40,   71,   93,   68,   94,   88,   95,   89,   90,   91,
       70,   46,   46,   46,   47,   93,  293,   94,  291,   95,
       96,   96,   96,  290,   49,   46,   46,   46,   47,  289,
      145,  113,   99,  100,  100,  100,   79,  109,   49,   46,
       46,   46,   47,  288,  287,  103,  112,  285,  122,  127,
      284,  128,   49,   73,   73,   73,   74,   63,   66,  109,
       68,  127,  283,  110,  111,   95,   76,   59,  112,   59,
       66,   58,  282,  120,  132,   84,   63,  281,   63,  179,
      109,   84,   59,   68,  163,  210,   85,  277,  112,  112,

       86,   63,  159,  159,  159,  109,   86,   96,   96,   96,
       97,  276,  274,  273,  112,  162,  212,  251,  213,   99,
       40,   40,   40,   69,  272,  215,  215,  270,  109,  254,
      251,  187,   70,  100,  100,  100,  101,  112,  255,  215,
      269,  179,  254,  179,  209,  103,   40,   40,   40,   71,
      112,  255,  112,  268,  212,  294,  213,  245,   70,   73,
       73,   73,   74,  215,  215,  266,  265,  264,  212,  278,
      213,  279,  104,   73,   73,   73,   74,  215,  215,  199,
      262,  261,  278,  294,  279,  292,  104,   73,   73,   73,
       74,  215,  215,  260,  258,  257,  306,  278,  253,  279,

      104,  105,  105,  105,  106,  255,  215,   59,   59,  252,
      250,  149,  150,  306,  108,  122,   63,   63,  123,  124,
      249,  247,  255,  125,   63,  246,  244,  243,  242,  125,
       96,   96,   96,  129,  240,  239,  238,  237,  236,  235,
      233,  231,  130,   96,   96,   96,  131,  229,  228,  227,
      225,  223,  222,  221,  220,  130,  100,  100,  100,  133,
      219,  218,  217,  211,  210,  208,  206,  205,  134,  100,
      100,  100,  135,  204,  146,  203,  202,  200,  199,  198,
      197,  134,  105,  105,  105,  106,  195,  194,  193,  192,
      191,  190,  189,  188,  186,  136,  105,  105,  105,  106,

      185,  184,  183,  182,  181,  178,  177,  172,  171,  137,
      105,  105,  105,  106,  170,  169,  168,  167,  166,  113,
      165,  164,  155,  137,  105,  105,  105,  106,  154,  150,
      149,  116,  146,  144,  143,  142,   95,  137,  138,  138,
      138,  139,  126,  121,  179,  122,  122,  120,  180,  171,
      184,  141,  122,  112,   63,   63,  121,  119,  118,  122,
      151,   63,  117,  185,  116,  179,  151,  122,   63,  196,
      114,  152,  113,   51,  112,  153,   63,   72,   92,   87,
       83,  153,   96,   96,   96,  129,   56,   81,   80,   52,
       77,   45,   72,   39,  130,   96,   96,   96,   97,   64,

       58,   57,   56,   53,   52,   26,   51,   99,   96,   96,
       96,  131,   50,   45,   36,   31,   29,   28,   26,   25,
      130,  100,  100,  100,  133,   24,   23,   20,   16,  307,
      307,  307,  307,  134,  100,  100,  100,  101,  307,  307,
      307,  307,  307,  307,  307,  307,  103,  100,  100,  100,
      135,  307,  307,  307,  307,  307,  307,  307,  307,  134,
      138,  138,  138,  139,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  156,  138,  138,  138,  139,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  157,  138,  138,
      138,  139,  307,  307,  307,  307,  307,  307,  307,  307,

      307,  158,  138,  138,  138,  139,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  158,  138,  138,  138,  139,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  158,
      159,  159,  159,  160,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  162,  159,  159,  159,  160,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  173,  159,  159,
      159,  160,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  174,  159,  159,  159,  160,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  175,  159,  159,  159,  160,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  176,

      159,  159,  159,  160,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  176,  159,  159,  159,  160,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  176,  159,  159,
      159,  160,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  162,  159,  159,  159,  160,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  173,  159,  159,  159,  160,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  174,
      159,  159,  159,  160,  307,  109,  109,  307,  109,  201,
      207,  307,  216,  175,  112,  112,  212,  112,  213,  109,
      214,  307,  179,  224,  307,  215,  226,  307,  112,  109,

      212,  112,  213,  232,  230,  307,  179,  179,  112,  215,
      234,  241,  307,  179,  179,  112,  112,  248,  256,  307,
      307,  307,  112,  112,  212,  212,  213,  213,  259,  263,
      307,  307,  307,  215,  215,  212,  212,  213,  213,  267,
      271,  307,  307,  307,  215,  215,  212,  278,  213,  279,
      275,  280,  307,  307,  307,  215,  215,  278,  278,  279,
      279,  286,  297,  307,  307,  307,  215,  215,  278,  278,
      279,  279,  299,  301,  307,  307,  307,  215,  215,  278,
      278,  279,  279,  303,  305,  307,  307,  307,  215,  215,
        4,    4,    4,    4,   27,   27,   42,   42,   42,   42,

       44,   44,   44,   48,   48,   48,   48,   75,   75,   75,
       75,   98,   98,   98,   98,  102,  102,  102,  102,  107,
      107,  107,  107,  140,  140,  140,  140,  161,  161,  161,
      161,    3,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307
    } ;

static const short int yy_chk[961] =
    {   0,
        0,    1,  315,   18,   29,   18,   18,   18,   20,  310,
       20,  302,   20,   29,    1,    1,    1,    6,    1,    1,
        8,   33,   33,    1,    6,    1,    1,    2,  300,   10,
        8,    8,   10,   32,   39,   32,   32,   32,   39,  298,
        2,    2,    2,   39,    2,    2,   37,  296,   37,    2,
       37,    2,    2,   21,   21,   21,   21,   85,   85,   89,
       89,   40,   43,   43,   43,   21,   23,   23,   23,   23,
       40,   51,   51,   59,   43,  293,   65,   51,   67,   23,
       35,   81,   59,   35,   35,   65,  292,   67,   35,   35,
       81,   96,  117,  117,   35,   41,   41,   41,   41,   63,

       96,   63,   63,   63,  100,  152,  152,   41,   42,   42,
       42,   42,   66,  100,   66,   88,   66,   88,   88,   88,
       42,   46,   46,   46,   46,   93,  290,   93,  288,   93,
       99,   99,   99,  287,   46,   47,   47,   47,   47,  286,
      113,  113,   99,  103,  103,  103,  113,  109,   47,   48,
       48,   48,   48,  285,  284,  103,  109,  282,  122,  127,
      281,  128,   48,   49,   49,   49,   49,  122,  127,   77,
      128,   95,  280,   77,   77,   95,   49,   58,   77,  120,
       95,   58,  279,  120,  132,   58,   58,  277,  120,  179,
      142,   58,   60,  132,  142,  274,   60,  273,  179,  142,

       60,   60,  162,  162,  162,  232,   60,   68,   68,   68,
       68,  272,  270,  269,  232,  162,  212,  244,  212,   68,
       69,   69,   69,   69,  268,  212,  244,  266,  177,  247,
      251,  177,   69,   70,   70,   70,   70,  177,  247,  251,
      265,  203,  254,  256,  203,   70,   71,   71,   71,   71,
      203,  254,  256,  264,  238,  291,  238,  238,   71,   73,
       73,   73,   73,  238,  291,  262,  261,  260,  275,  278,
      275,  278,   73,   74,   74,   74,   74,  275,  278,  258,
      257,  255,  289,  294,  289,  289,   74,   75,   75,   75,
       75,  289,  294,  253,  250,  249,  304,  305,  246,  305,

       75,   76,   76,   76,   76,  304,  305,  149,  150,  245,
      243,  149,  150,  306,   76,   91,  149,  150,   91,   91,
      242,  240,  306,   91,   91,  239,  237,  236,  235,   91,
       97,   97,   97,   97,  233,  231,  230,  229,  228,  227,
      225,  223,   97,   98,   98,   98,   98,  221,  220,  219,
      217,  215,  214,  213,  211,   98,  101,  101,  101,  101,
      210,  209,  208,  205,  204,  202,  200,  199,  101,  102,
      102,  102,  102,  198,  197,  196,  195,  193,  192,  191,
      190,  102,  104,  104,  104,  104,  188,  187,  186,  183,
      182,  181,  180,  178,  172,  104,  105,  105,  105,  105,

      170,  169,  168,  167,  166,  164,  163,  155,  154,  105,
      106,  106,  106,  106,  153,  151,  148,  147,  146,  145,
      144,  143,  126,  106,  107,  107,  107,  107,  125,  119,
      118,  116,  114,  112,  111,  110,   94,  107,  108,  108,
      108,  108,   92,   90,  165,  171,  184,   87,  165,  171,
      184,  108,  121,  165,  171,  184,  121,   86,   84,  185,
      121,  121,   83,  185,   82,  189,  121,  123,  185,  189,
       80,  123,   79,   78,  189,  123,  123,   72,   64,   62,
       57,  123,  129,  129,  129,  129,   56,   55,   53,   52,
       50,   45,   44,   38,  129,  130,  130,  130,  130,   36,

       34,   31,   30,   28,   27,   26,   25,  130,  131,  131,
      131,  131,   24,   22,   19,   17,   16,   15,   14,   13,
      131,  133,  133,  133,  133,   12,   11,    9,    7,    3,
        0,    0,    0,  133,  134,  134,  134,  134,    0,    0,
        0,    0,    0,    0,    0,    0,  134,  135,  135,  135,
      135,    0,    0,    0,    0,    0,    0,    0,    0,  135,
      136,  136,  136,  136,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  136,  137,  137,  137,  137,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  137,  138,  138,
      138,  138,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  138,  139,  139,  139,  139,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  139,  140,  140,  140,  140,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  140,
      141,  141,  141,  141,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  141,  156,  156,  156,  156,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  156,  157,  157,
      157,  157,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  157,  158,  158,  158,  158,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  158,  159,  159,  159,  159,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  159,

      160,  160,  160,  160,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  160,  161,  161,  161,  161,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  161,  173,  173,
      173,  173,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  173,  174,  174,  174,  174,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  174,  175,  175,  175,  175,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  175,
      176,  176,  176,  176,    0,  194,  201,    0,  207,  194,
      201,    0,  207,  176,  194,  201,  206,  207,  206,  216,
      206,    0,  218,  216,    0,  206,  218,    0,  216,  224,

      222,  218,  222,  224,  222,    0,  226,  234,  224,  222,
      226,  234,    0,  241,  248,  226,  234,  241,  248,    0,
        0,    0,  241,  248,  252,  259,  252,  259,  252,  259,
        0,    0,    0,  252,  259,  263,  267,  263,  267,  263,
      267,    0,    0,    0,  263,  267,  271,  276,  271,  276,
      271,  276,    0,    0,    0,  271,  276,  283,  295,  283,
      295,  283,  295,    0,    0,    0,  283,  295,  297,  299,
      297,  299,  297,  299,    0,    0,    0,  297,  299,  301,
      303,  301,  303,  301,  303,    0,    0,    0,  301,  303,
      308,  308,  308,  308,  309,  309,  311,  311,  311,  311,

      312,  312,  312,  313,  313,  313,  313,  314,  314,  314,
      314,  316,  316,  316,  316,  317,  317,  317,  317,  318,
      318,  318,  318,  319,  319,  319,  319,  320,  320,  320,
      320,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307
    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

#if YY_vrscan_DEBUG != 0
static const short int yy_rule_linenum[16] =
    {   0,
      111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
      121,  122,  123,  124,  125
    } ;

#endif
/* the intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#line 378 "flexskel.cc"
#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
#else
#define yy_get_previous_state() ((yy_state_type)(yy_get_previous_state_()))
#define yy_try_NUL_trans(c) ((yy_state_type)(yy_try_NUL_trans_(c)))
#endif

#ifndef YY_USE_CLASS
#ifdef YY_vrscan_LEX_DEFINED
YY_vrscan_LEX_RETURN YY_vrscan_LEX ( YY_vrscan_LEX_PARAM )
YY_vrscan_LEX_PARAM_DEF
#else
YY_DECL
#endif
#else
YY_vrscan_LEX_RETURN YY_vrscan_CLASS::YY_vrscan_LEX ( YY_vrscan_LEX_PARAM)

#endif
    {
    register yy_state_type yy_current_state;
    register YY_vrscan_CHAR *yy_cp, *yy_bp;
    register int yy_act;

/* % user's declarations go here */ 


/* % end of prolog */ 
#line 403 "flexskel.cc"

    if ( yy_init )
	{
	 
	 {
	 YY_USER_INIT;
	 }
	if ( ! yy_start )
	    yy_start = 1;       /* first start state */

	if ( ! yy___in )
	    yy___in = YY_vrscan_IFILE_DEFAULT;

	if ( ! yy___out )
	    yy___out = YY_vrscan_OFILE_DEFAULT;

	if ( YY_vrscan_CURRENT_BUFFER )
	    YY_vrscan_INIT_BUFFER( YY_vrscan_CURRENT_BUFFER, yy___in );
	else
	    YY_vrscan_CURRENT_BUFFER = YY_vrscan_CREATE_BUFFER( yy___in, YY_BUF_SIZE );

	YY_vrscan_LOAD_BUFFER_STATE();
	yy_init=0;
	}

    while ( 1 )         /* loops until end-of-file is reached */
	{
/* % yymore()-related code goes here */ 
#line 431 "flexskel.cc"
	yy_cp = yy_c_buf_p;

	/* support of yy___text */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

/* % code to set up and find next match goes here */ 
	yy_current_state = yy_start;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 308 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    ++yy_cp;
	    }
	while ( yy_current_state != 307 );
	yy_cp = yy_last_accepting_cpos;
	yy_current_state = yy_last_accepting_state;
#line 442 "flexskel.cc"

yy_find_action:
/* % code to find the action number goes here */ 
	yy_act = yy_accept[yy_current_state];
#line 445 "flexskel.cc"

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:      /* this label is used only to access EOF actions */
#if YY_vrscan_DEBUG != 0
	if ( yy___flex_debug )
		{
		if ( yy_act == 0 )
#ifndef YY_vrscan_IOSTREAM
			fprintf( yy___stderr , "--scanner backtracking\n" );
#else
			yy___stderr <<"--scanner backtracking"<<endl;
#endif
		else if ( yy_act < YY_END_OF_BUFFER -1 )
#ifndef YY_vrscan_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting rule at line %d (\"%s\")\n",
			 yy_rule_linenum[yy_act], yy___text );
#else
			yy___stderr <<"--accepting rule at line "
                          <<(int)yy_rule_linenum[yy_act]
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER -1 )
#ifndef YY_vrscan_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting default rule (\"%s\")\n",
			 yy___text );
#else
			yy___stderr <<"--accepting default rule"
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER )
#ifndef YY_vrscan_IOSTREAM
			fprintf( yy___stderr , "--(end of buffer or a NUL)\n" );
#else
			yy___stderr <<"--(end of buffer or a NUL)"<<endl;
#endif
		else
#ifndef YY_vrscan_IOSTREAM
			fprintf( yy___stderr , "--EOF\n" );
#else
			yy___stderr <<"--EOF"<<endl;
#endif
		}
#endif
	switch ( yy_act )
	    {
/* % actions go here */ 
	    case 0: /* must backtrack */
	    /* undo the effects of YY_DO_BEFORE_ACTION */
	    *yy_cp = yy_hold_char;
	    yy_cp = yy_last_accepting_cpos;
	    yy_current_state = yy_last_accepting_state;
	    goto yy_find_action;

case 1:
#line 111 "vrscan.l"
{return 1;  /* AS */}
	YY_BREAK
case 2:
#line 112 "vrscan.l"
{return 2;  /* DA */}
	YY_BREAK
case 3:
#line 113 "vrscan.l"
{return 3;  /* OLD_DA */}
	YY_BREAK
case 4:
#line 114 "vrscan.l"
{return 4;  /* TM */}
	YY_BREAK
case 5:
#line 115 "vrscan.l"
{return 5;  /* OLD_TM */}
	YY_BREAK
case 6:
#line 116 "vrscan.l"
{return 6;  /* DS */}
	YY_BREAK
case 7:
#line 117 "vrscan.l"
{return 7;  /* DT */}
	YY_BREAK
case 8:
#line 118 "vrscan.l"
{return 8;  /* IS */}
	YY_BREAK
case 9:
#line 119 "vrscan.l"
{return 9;  /* UI */}
	YY_BREAK
case 10:
#line 120 "vrscan.l"
{return 10; /* CS */}
	YY_BREAK
case 11:
#line 121 "vrscan.l"
{return 11; /* PN */}
	YY_BREAK
case 12:
#line 122 "vrscan.l"
{return 12; /* LO | SH */}
	YY_BREAK
case 13:
#line 123 "vrscan.l"
{return 13; /* AE */}
	YY_BREAK
case 14:
#line 124 "vrscan.l"
{return 14; /* LT | ST */}
	YY_BREAK
case 15:
#line 125 "vrscan.l"
{return 15; /* UNKNOWN */;}
	YY_BREAK
case 16:
#line 127 "vrscan.l"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
    yyterminate();
#line 495 "flexskel.cc"

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yy___text - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &YY_vrscan_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yy___text + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yy___text + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
/* % code to do backtracking for compressed tables and set up yy_cp goes here */ 
			    yy_cp = yy_last_accepting_cpos;
			    yy_current_state = yy_last_accepting_state;
#line 543 "flexskel.cc"
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yy___text,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yy___text + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yy___text + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &YY_vrscan_CURRENT_BUFFER->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#if YY_vrscan_DEBUG != 0
#ifndef YY_vrscan_IOSTREAM
		fprintf(yy___stderr , "action # %d\n", yy_act );
#else
		yy___stderr <<"action # "<<(int)yy_act<<endl;
#endif
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
	yyterminate();/* avoid the no return value error message on MS-C7/dos */
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */
#ifndef YY_USE_CLASS
static int yy_get_next_buffer()
#else
int YY_vrscan_CLASS::yy_get_next_buffer()
#endif
    {
    register YY_vrscan_CHAR *dest = YY_vrscan_CURRENT_BUFFER->yy_ch_buf;
    register YY_vrscan_CHAR *source = yy___text - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &YY_vrscan_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yy___text;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( YY_vrscan_CURRENT_BUFFER->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = YY_vrscan_CURRENT_BUFFER->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&YY_vrscan_CURRENT_BUFFER->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move - YY_MORE_ADJ == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    YY_vrscan_CURRENT_BUFFER->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    YY_vrscan_CURRENT_BUFFER->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    YY_vrscan_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    YY_vrscan_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yy___text begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yy___text = &YY_vrscan_CURRENT_BUFFER->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state()
#else
long YY_vrscan_CLASS::yy_get_previous_state_()
#endif
    {
    register yy_state_type yy_current_state;
    register YY_vrscan_CHAR *yy_cp;

/* % code to get the start state into yy_current_state goes here */ 
    yy_current_state = yy_start;
#line 719 "flexskel.cc"

    for ( yy_cp = yy___text + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
/* % code to find the next state goes here */ 
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	if ( yy_accept[yy_current_state] )
	    {
	    yy_last_accepting_state = yy_current_state;
	    yy_last_accepting_cpos = yy_cp;
	    }
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 308 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
#line 723 "flexskel.cc"
	}

#ifndef YY_USE_CLASS
    return ( yy_current_state );
#else
    return (long)( yy_current_state );
#endif
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif
#else
long YY_vrscan_CLASS::yy_try_NUL_trans_(long yy_current_state_)
#endif

    {
#ifndef YY_USE_CLASS
#else
    yy_state_type yy_current_state=(yy_state_type)yy_current_state_;
#endif
    register int yy_is_jam;
/* % code to find the next state, and perhaps do backtracking, goes here */ 
    register YY_CHAR *yy_cp = yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
	{
	yy_last_accepting_state = yy_current_state;
	yy_last_accepting_cpos = yy_cp;
	}
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 308 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 307);
#line 757 "flexskel.cc"

#ifndef YY_USE_CLASS
    return ( yy_is_jam ? 0 : yy_current_state );
#else
    return (long)( yy_is_jam ? 0 : yy_current_state );
#endif
    }

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static void yyunput( YY_vrscan_CHAR c, register YY_vrscan_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_vrscan_CHAR c;
register YY_vrscan_CHAR *yy_bp;
#endif
#else
void YY_vrscan_CLASS::yyunput( YY_vrscan_CHAR c, YY_vrscan_CHAR *yy_bp )
#endif

    {
    register YY_vrscan_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yy___text */
    *yy_cp = yy_hold_char;

    if ( yy_cp < YY_vrscan_CURRENT_BUFFER->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_vrscan_CHAR *dest =
	    &YY_vrscan_CURRENT_BUFFER->yy_ch_buf[YY_vrscan_CURRENT_BUFFER->yy_buf_size + 2];
	register YY_vrscan_CHAR *source =
	    &YY_vrscan_CURRENT_BUFFER->yy_ch_buf[number_to_move];

	while ( source > YY_vrscan_CURRENT_BUFFER->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = YY_vrscan_CURRENT_BUFFER->yy_buf_size;

	if ( yy_cp < YY_vrscan_CURRENT_BUFFER->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yy___text again */
    }

#ifndef YY_USE_CLASS
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
#else
int YY_vrscan_CLASS::input()
#endif
    {
    int c;
    YY_vrscan_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &YY_vrscan_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yy___text = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yy___text + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yy___text + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
#else
		    YY_FATAL_ERROR( "unexpected last match in YY_vrscan_CLASS::input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_vrscan_RESTART( YY_vrscan_IFILE  *input_file )
#else
void YY_vrscan_RESTART( input_file )
YY_vrscan_IFILE  *input_file;
#endif
#else
void YY_vrscan_CLASS::YY_vrscan_RESTART ( YY_vrscan_IFILE  *input_file )
#endif

    {
    YY_vrscan_INIT_BUFFER( YY_vrscan_CURRENT_BUFFER, input_file );
    YY_vrscan_LOAD_BUFFER_STATE();
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_vrscan_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#else
void YY_vrscan_SWITCH_TO_BUFFER( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
#else
void YY_vrscan_CLASS::YY_vrscan_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#endif

    {
    if ( YY_vrscan_CURRENT_BUFFER == new_buffer )
	return;

    if ( YY_vrscan_CURRENT_BUFFER )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	YY_vrscan_CURRENT_BUFFER->yy_buf_pos = yy_c_buf_p;
	YY_vrscan_CURRENT_BUFFER->yy_n_chars = yy_n_chars;
	}

    YY_vrscan_CURRENT_BUFFER = new_buffer;
    YY_vrscan_LOAD_BUFFER_STATE();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_vrscan_LOAD_BUFFER_STATE( void )
#else
void YY_vrscan_LOAD_BUFFER_STATE()
#endif
#else
void YY_vrscan_CLASS::YY_vrscan_LOAD_BUFFER_STATE(  )
#endif

    {
    yy_n_chars = YY_vrscan_CURRENT_BUFFER->yy_n_chars;
    yy___text = yy_c_buf_p = YY_vrscan_CURRENT_BUFFER->yy_buf_pos;
    yy___in = YY_vrscan_CURRENT_BUFFER->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE YY_vrscan_CREATE_BUFFER( YY_vrscan_IFILE  *file, int size )
#else
YY_BUFFER_STATE YY_vrscan_CREATE_BUFFER( file, size )
YY_vrscan_IFILE  *file;
int size;
#endif
#else
YY_BUFFER_STATE YY_vrscan_CLASS::YY_vrscan_CREATE_BUFFER( YY_vrscan_IFILE  *file, int size )
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in YY_vrscan_CREATE_BUFFER()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_vrscan_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in YY_vrscan_CREATE_BUFFER()" );

    YY_vrscan_INIT_BUFFER( b, file );

    return ( b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_vrscan_DELETE_BUFFER( YY_BUFFER_STATE b )
#else
void YY_vrscan_DELETE_BUFFER( b )
YY_BUFFER_STATE b;
#endif
#else
void YY_vrscan_CLASS::YY_vrscan_DELETE_BUFFER( YY_BUFFER_STATE b )
#endif

    {
    if ( b == YY_vrscan_CURRENT_BUFFER )
	YY_vrscan_CURRENT_BUFFER = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_vrscan_INIT_BUFFER( YY_BUFFER_STATE b, YY_vrscan_IFILE  *file )
#else
void YY_vrscan_INIT_BUFFER( b, file )
YY_BUFFER_STATE b;
YY_vrscan_IFILE  *file;
#endif
#else
void YY_vrscan_CLASS::YY_vrscan_INIT_BUFFER( YY_BUFFER_STATE b, YY_vrscan_IFILE  *file)
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
#line 127 "vrscan.l"

