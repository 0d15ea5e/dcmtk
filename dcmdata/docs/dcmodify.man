/*!

\if MANPAGES
\page dcmodify Modify DICOM files
\else
\page dcmodify dcmodify: Modify DICOM files
\endif

\section synopsis SYNOPSIS

\verbatim
dcmodify [options] [dcmfile-in...]
\endverbatim

\section description DESCRIPTION

\b dcmodify is a tool that allows to modify, insert and delete tags in DICOM
files.  The special cases sequences, items and tags with a value multiplicity
> 1 are also supported.  Generally, there are two modes of operation: command
line and batch mode.  In command line mode the file names have to be
specified directly as parameter \e dcmfile-in (wildcards allowed).  In batch
mode a text file has to be specified where each line represents a command
describing a particular modification on a file.  Please note that the batch
mode is an exclusive option which cannot be combined with other modification
options.

\b dcmodify only accepts a single option from \e -i, \e -ii, \e -m, \e -mi,
\e -ma, \e -e and \e -ea on the command line.  In case multiple modifications
are to be performed on a particular DICOM file, \b dcmodify has to be called
multiple times or to be used in batch mode.  Please note that \b dcmodify
does not check whether given values are of the right value representation (VR).
Usually, an error message is printed but generally the user should take care
of the right VR usage.

\section parameters PARAMETERS

\verbatim
dcmfile-in  DICOM input filename to be modified
\endverbatim

\section options OPTIONS

\subsection general_options general options
\verbatim
  -h   --help
         print this help text and exit

       --version
         print version information and exit

  -d   --debug
         debug mode, print debug information

  -v   --verbose
         verbose mode, print verbose output
\endverbatim

\subsection insert_mode_options insert-mode options
\verbatim
  -i   --insert-tag  "xxxx,xxxx=value"
         insert (and overwrite) given tag at 1. Level denoted by
         gggg,eeee=value

  -ii  --insert-item-tag  "xxxx,xxxx[n].yyyy,yyyy=value"
         insert (and overwrite) tag in sequence denoted by
         gggg,eeee[n]=value, n specifies item-nr(starts with 0).
         This kind of path can repeated for deeper-level-access
\endverbatim

\subsection modify_mode_options modify-mode options
\verbatim
  -m   --modify-tag  "xxxx,xxxx=value"
         modify given tag at 1.Level denoted by gggg,eeee=value

  -mi  --modify-item-tag  "xxxx,xxxx[n].yyyy,yyyy=value"
         modify tag in sequence denoted by gggg,eeee[n]=value;
         n specifies item-nr (starts with 0).
         Can repeated for deeper-level-access

  -ma  --modify-all-tags  "xxxx,xxxx=value"
         modify ALL existing tags matching gggg,eeee in file
\endverbatim

\subsection erase_mode_options erase-mode options
\verbatim
  -e   --erase-tag  "xxxx,xxxx"
         erase given tag at 1.Level denoted by gggg,eeee

  -ei  --erase-item-tag  "xxxx,xxxx[n].yyyy,yyyy=value"
         erases tag in sequences denoted by gggg,eeee[n]=value;
         n specifies item-nr (starts with 0).
         Can repeated for deeper-level-access

  -ea  --erase-all-tags  "xxxx,xxxx"
         erase ALL exisiting tags matching gggg,eeee in file
\endverbatim

\subsection batch_mode_options batch-mode options
\verbatim
  -b   --batch-mode   batch-file
         processes batch-file, that contains commandos for
         modifying/inserting tags.
         One line consists of: filename commando tag value
\endverbatim

\section examples EXAMPLES

\verbatim
-i  --insert-tag:
      dcmodify -i "0010,0010=A Name" file.dcm
      Inserts the patients name tag into file.dcm at 1. level.
      If tag already exists, -i will overwrite it!
      If you want to insert an element with value multiplicity > 1
      (e.g. 4) you can do this with: dcmodify -i "0018,1310=1\2\3\4"

-ii --insert-item-tag:
      dcmodify -ii "0008,1111[2].0010,0010=A Name" file.dcm
      Inserts in sequence denoted by 0008,1111 in the third(!)
      item the tag 0010,0010 with value "A Name".
      As you see, count of items starts with 0!
      If tag already exists, -i will overwrite it!
      You can describe a longer tag path than above
      with e.g:
      "0008,1111[2].0008,1140[0].0010,0010=A Name"

-m  --modify-tag:
      dcmodify -m "0010,0010=A Name" file.dcm
      Changes tag 0010,0010 on 1. level to "A Name"

-mi --modify-item-tag:
      dcmodify -mi "0008,1111[2].0010,0010=A Name" file.dcm
      same as -ii, but does only change existing tag to "A Name"

-ma --modify-all-tags:
      dcmodify -ma "0010,0010=A Name" file.dcm
      Does the same as -m but works on all(!) levels.
      Therefore it searches the whole dataset including
      sequences for 0010,0010 and changes all matching tags
      to "A Name"

-e  --erase-tag:
      dcmodify -e "0010,0010" *.dcm
      Erases tag 0010,0010 in all *.dcm files at 1. level.
      Note: You also can erase whole sequences by using this
      option with a sequence tag, but up to now its not
      possible to delete a single item in a sequence.

-ea --erase-all-tags:
      dcmodify -ea "0010,0010" *.dcm
      Same as -e, but searches also in sequences and items, so
      with this commando you could "anonymize" your files e.g.

-ei --erase-item-tag:
      dcmodify -ei 0008,1111[0].0010,0010
      Erases tag 0010,0010 only in item denoted by
      008,1111[0]. Other tag occurences are not affected.

-b  --batch-mode:
      dcmodify -b batchfile
      The following two lines could be an example for
      "batchfile":
          dump.dcm m 0010,0010=Doe^John
          file.dcm i 0018,1310=1\\2\\3\\4
          file.dcm ii 0008,1111[2].0010,0010=A Name
      1. column denotes a file, wildcards are NOT supported.
      2. column denotes, what to do; all modify-options are
          allowed (i,ii,m,mi,ma,e,ea) exclusive b.
      3. column denotes the tag/-path and value split by '='
      - A row starting with a hash ('#') is ignored and
        treated as a comment.
      - Please use only one space between columns and use
        only '=' to split column 3 into tag and value
      - do not surround values with '"' or similar.
\endverbatim

\section command_line COMMAND LINE

All command line tools use the following notation for parameters: square
brackets enclose optional values (0-1), three trailing dots indicate that
multiple values are allowed (1-n), a combination of both means 0 to n values.

Command line options are distinguished from parameters by a leading '+' or '-'
sign, respectively.  Usually, order and position of command line options are
arbitrary (i.e. they can appear anywhere).  However, if options are mutually
exclusive the rightmost appearance is used.  This behaviour conforms to the
standard evaluation rules of common Unix shells.

In addition, one or more command files can be specified using an '@' sign as a
prefix to the filename (e.g. <em>\@command.txt</em>).  Such a command argument
is replaced by the content of the corresponding text file (multiple
whitespaces are treated as a single separator) prior to any further
evaluation.  Please note that a command file cannot contain another command
file. This simple but effective approach allows to summarize common
combinations of options/parameters and avoids longish and confusing command
lines (an example is provided in file <em>dcmdata/apps/dumppat.txt</em>).

\section environment ENVIRONMENT

The \b dcmodify utility will attempt to load DICOM data dictionaries specified
in the \e DCMDICTPATH environment variable.  By default, i.e. if the
\e DCMDICTPATH environment variable is not set, the file
<em>/usr/local/dicom/lib/dicom.dic</em> (in fact the \e PREFIX as defined
during \b configure is used) will be loaded unless the dictionary is built
into the application (default for Windows).

The default behaviour should be preferred and the \e DCMDICTPATH environment
variable only used when alternative data dictionaries are required.  The
\e DCMDICTPATH environment variable has the same format as the Unix shell
\e PATH variable in that a colon (":") separates entries.  The data dictionary
code will attempt to load each file specified in the \e DCMDICTPATH
environment variable.  It is an error if no data dictionary can be loaded.

\section copyright COPYRIGHT

Copyright (C) 2003 by Kuratorium OFFIS e.V., Escherweg 2, 26121 Oldenburg,
Germany.

*/
