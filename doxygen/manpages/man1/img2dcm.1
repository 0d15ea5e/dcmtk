.TH "img2dcm" 1 "8 Nov 2007" "Version 3.5.4 CVS" "OFFIS DCMTK" \" -*- nroff -*-
.nh
.SH NAME
img2dcm \- Convert standard image formats into DICOM format
.SH "SYNOPSIS"
.PP
.PP
.nf

img2dcm [options] imgfile-in dcmfile-out
.fi
.PP
.SH "DESCRIPTION"
.PP
The \fBimg2dcm\fP tool serves as a convert from a general image format like JPEG to DICOM. Different output SOP Classes can be selected. The additional information stored in the target DICOM file can be extracted from other DICOM files which serve as a 'template' for the target DICOM object.
.SH "PARAMETERS"
.PP
.PP
.nf

imgfile-in  image file to be imported
.fi
.PP
.SH "OPTIONS"
.PP
.SS "general options"
.PP
.nf

  -h    --help
          print this help text and exit

        --version
          print version information and exit

  -v    --verbose
          verbose mode, print processing details

  -d    --debug
          debug mode, print debug information
.fi
.PP
.SS "input options"
.PP
.nf


general input options:
  -i    --input-format  [i]nput file format: string
          supported formats: JPEG (default)

  -df   --dataset-from  [f]ilename : string
          use dataset from DICOM file f

  -stf  --study-from  [f]ilename : string
          read patient/study from DICOM file f

  -sef  --series-from [f]ilename : string
          read patient/study/series from DICOM file f

  -ii   --instance-inc
          incr. instance number read from DICOM file
JPEG input options:
  -dp   --disable-progr
          disable support for progressive JPEG

  -de   --disable-ext
          disable support for extended sequential JPEG
.fi
.PP
.SS "processing options"
.PP
.nf

        --no-checks
          Disable attribute validity checking

  -k    --key  key: gggg,eeee="str" or dictionary name="str"
          add further attribute
.fi
.PP
.SS "output options"
.PP
.nf


target SOP class:
  -vlp --vl-photo
         write Visible Light Photo SOP class (default)

  -sc  --sec-capture
         write Secondary Capture SOP class (depr.)

output file format:
  +F   --write-file
         write file format (default)

  -F   --write-dataset
         write data set without file meta information

group length encoding:

  +g= --group-length-recalc
        recalculate group lengths if present (default)

  +g  --group-length-create
        always write with group length elements

  -g  --group-length-remove
        always write without group length elements

length encoding in sequences and items:

  +e  --length-explicit
        write with explicit lengths (default)

  -e  --length-undefined
        write with undefined lengths

data set trailing padding (not with --write-dataset):

  -p  --padding-off
        no padding (implicit if --write-dataset)

  +p  --padding-create  [f]ile-pad [i]tem-pad: integer
        align file on multiple of f bytes
.fi
.PP
.SH "NOTES"
.PP
For converting a general image format into DICOM format, the \fBimg2dcm\fP application needs some additional input for filling mandatory attributes in the DICOM file like patient, study and series information. This information can be collected using different approaches, which can be combined and are applied to the result file in the following order:
.PP
.PD 0
.IP "\(bu" 2
Using the \fI--dataset-from\fP option \fBimg2dcm\fP is forced to import attributes from an existing DICOM file. The given DICOM file is fully imported and serves as the basis for all further export operations. As a recommendation, use the templates in the etc directory of this module for SC and VLP objects. See also section INPUT TEMPLATES.
.PP
.PD 0
.IP "\(bu" 2
The \fI--study-from\fP and \fI--series-from\fP options (mutually exclusive) can be used to import study and series information from an existing DICOM file. If \fI--series-from\fP is specified, then the given DICOM file is opened by img2dcm and all mandatory information down to the series is imported. Please note that this includes patient information (e. g. Patient ID), study information (e. g. Study Instance UID) and - in case of \fI--series-from\fP also series information (e. g. Series Instance UID).
.PP
.PD 0
.IP "\(bu" 2
The \fI--key\fP option can be used to add additonal attributes to the target DICOM file. This option is applied at the very end just before saving the DICOM file. As a result, these additional keys given on command line do not undergoe any validity checking. Note that at this time it is not possible to add any attributes within sequences but only at the 'main level' of the dataset. If you want to add attributes within sequences, you have to integrate them into the DICOM dataset imported by the \fI--dataset-from\fP option.
.PP
All UIDs are usually newly generated as necessary after applying the \fI--study-from\fP and \fI--series\fP options. If Study Instance UID and Series Instance UID are not present after these steps, they are newly generated. The same behaviour is valid for the SOP instance UID, which is not imported by the \fI--study-from\fP and \fI--series-from\fP options but could have been provided by the \fI--dataset-from\fP option. If the SOP instance UID does not exist, it is newly generated and inserted.
.SS "INPUT TEMPLATES"
For supporting the conversion into DICOM, \fBimg2dcm\fP comes with some pre-defined templates wich can be used for the \fI--dataset-from\fP option (SC.dump and VLP.dump in the etc directory). These templates should be filled with the desired values and then must be dumped (converted) to a DICOM file before actually being used with img2dcm. Use \fBdump2dcm\fP to convert the dump to DICOM. Example: dump2dcm SC.dump SC.dcm
.PP
It is possible to use any DICOM file as a template. Please note that the complete DICOM dataset is imported; hence it should be assured that only attributes are present which should be part of the constructed DICOM object. The SOP Class UID and the Pixel Data attributes are not copied but replaced by \fBimg2dcm\fP during conversion.
.PP
Overall it is strongly recommended to use (and alter) the existing templates shipped with img2dcm (VLP.dump and SC.dump) and to convert them using the \fBdump2dcm\fP as described above.
.SS "INPUT PLUGINS"
The \fBimg2dcm\fP application at this time only supports the JPEG image format as input. The JPEG data from the source file is not decoded but extracted and slightly transformed (e. g. JFIF header is cut off) to allow fast conversion of even big JPEG files without the need of decoding and re-encoding. The JPEG plugin chooses the necessary output transfer syntax itself, depending on the actual encoding of the data inside the JPEG file. Therefore, the following Transfer Syntaxes (and their corresponding JPEG encodings) are used by the the JPEG plugin:
.PP
.PD 0
.IP "\(bu" 2
JPEG Coding Process 1 Baseline, Lossy, Non-Hierarchical, Sequential, DCT, Huffman, 8 Bit SOP Class = 1.2.840.10008.1.2.4.50
.PP
.PD 0
.IP "\(bu" 2
JPEG Coding Process 2 (8-bit) and 4 (12-bit) Extended, Lossy, Non-Hierarchical, Sequential, DCT, Huffman, 8/12 Bit SOP Class = 1.2.840.10008.1.2.4.51
.PP
.PD 0
.IP "\(bu" 2
JPEG Coding Process 10 (8-bit) and 12 (12-bit) Full Progression, lossy, Non-Hierarch., Progressive, DCT, Huffman, 8/12 Bit SOP Class = 1.2.840.10008.1.2.4.55
.PP
Color and grayscale images are supported.
.PP
The support for the Extended JPEG Transfer Syntax can be disabled (\fI--disable-ext\fP option) as well as for the (retired) Progressive JPEG Transfer Syntax (\fI--disable-progr\fP option).
.PP
JPEG lossless encoding or any arithmethic or hierarchical JPEG encoding modes are not supported by the plugin.
.SS "OUTPUT PLUGINS"
The desired output IOD can be selected on the command line. At this time an export plugin for the Visible Light Photographic Image IOD (option \fI-vl\fP) and the Secondary Capture Image IOD (option \fI-sc\fP) are available. Please note that the second one is retired in the DICOM standard. Future versions of \fBimg2dcm\fP might provide further output plugins for further IODs, e. g. the newly introduced Secondary Capture objects.
.SH "EXAMPLES"
.PP
Here are some examples how the \fBimg2dcm\fP application can be used.
.PP
.PD 0
.IP "\(bu" 2
1) Read JPEG file image.jpg, convert to Visible Light Photography SOP Class and use SC.dcm as a template. Invent new UIDs for Study/Series/SOP if not present in VLP.dcm. Write resulting DICOM file to out.dcm:
.br
 img2dcm image.jpg out.dcm --dataset-from VLP.dcm 
.PP

.IP "\(bu" 2
2) Same as 1) but write Secondary Capture and therefore use template SC.dcm. 
.br
 img2dcm -sc image.jpg out.dcm --dataset-from SC.dcm 
.PP

.IP "\(bu" 2
3) Same as 2) but import patient/study/series data from sameseries.dcm.
.br
 img2dcm -sc image.jpg out.dcm --dataset-from SC.dcm --series-from sameseries.dcm 
.PP

.IP "\(bu" 2
Same as 2) but overwrite PatientsName with 'BOND^JAMES' in the resulting DICOM file:
.br
 img2dcm -sc image.jpg out.dcm --dataset-from SC.dcm -k PatientsName='BOND^JAMES'  
.PP
.SH "COMMAND LINE"
.PP
All command line tools use the following notation for parameters: square brackets enclose optional values (0-1), three trailing dots indicate that multiple values are allowed (1-n), a combination of both means 0 to n values.
.PP
Command line options are distinguished from parameters by a leading '+' or '-' sign, respectively. Usually, order and position of command line options are arbitrary (i.e. they can appear anywhere). However, if options are mutually exclusive the rightmost appearance is used. This behaviour conforms to the standard evaluation rules of common Unix shells.
.PP
In addition, one or more command files can be specified using an '@' sign as a prefix to the filename (e.g. \fI@command.txt\fP). Such a command argument is replaced by the content of the corresponding text file (multiple whitespaces are treated as a single separator) prior to any further evaluation. Please note that a command file cannot contain another command file. This simple but effective approach allows to summarize common combinations of options/parameters and avoids longish and confusing command lines (an example is provided in file \fI<datadir>/dumppat.txt\fP).
.SH "ENVIRONMENT"
.PP
The \fBimg2dcm\fP utility will attempt to load DICOM data dictionaries specified in the \fIDCMDICTPATH\fP environment variable. By default, i.e. if the \fIDCMDICTPATH\fP environment variable is not set, the file \fI<datadir>/dicom.dic\fP will be loaded unless the dictionary is built into the application (default for Windows).
.PP
The default behaviour should be preferred and the \fIDCMDICTPATH\fP environment variable only used when alternative data dictionaries are required. The \fIDCMDICTPATH\fP environment variable has the same format as the Unix shell \fIPATH\fP variable in that a colon (':') separates entries. On Windows systems, a semicolon (';') is used as a separator. The data dictionary code will attempt to load each file specified in the \fIDCMDICTPATH\fP environment variable. It is an error if no data dictionary can be loaded.
.SH "COPYRIGHT"
.PP
Copyright (C) 2007 by Kuratorium OFFIS e.V., Escherweg 2, 26121 Oldenburg, Germany. 
