
DICOM TOOLKIT (DCMTK) INSTALLATION

PRE-REQUISITES

The DICOM ToolKit (DCMTK) needs to be compiled with a C++ compiler.
We have only used the GNU-C++ compiler in versions higher than 2.5.8 
(most of the development was done using GNU-C++ 2.7.2 on Solaris 2.4).

SUPPORTED SYSTEMS

The software is known to compile under the software under the following
hardware / operating system combinations:

    SUN Sparc 10 / Solaris 2.4
    SUN Sparc 10 / SunOS 4.1.3
    DEC Alpha / OSF 2.1
    DEC Decstation (Mips) / Ultrix 4.4
    Intel Pentium PC / NEXTSTEP 3.3

BUILDING

GNU autoconf is used to configure the software for the hardware /
operating system you are using.  You do not need to obtain GNU 
autoconf to compile and install this software.  All the neccessary 
configure scripts are included in this distribution.  The configure 
scripts examine your system capabilities and automatically generate
include files and Makefiles.

Perform the following steps from the top level (dcmtk) directory
to compile and install the software:

Step 1:
	cd config
	./rootconf
	cd ..

    Step 1 generates a Makefile and a configure script in the 
top level dcmtk directory.

Step 2:
	./configure

    Step 2 executes the configure scripts in each subdirectory.  First
the system capabilities are examined and then Makefiles are generated.
By default, executables and libraries will be installed (in Step 4)
in the directory /usr/local/dicom in the bin and lib subdirectories.
If you wish to use another install prefix you can use the --prefix=<path>
flag to configure.  e.g., if you wish to install underneath your home
directory in ~/dicom/bin and ~/dicom/lib then you should start configure
as:
	./configure --prefix=$HOME/dicom

Step 3:
	make all

    Step 3 will build the libraries and executables.  If you run into 
problems see the section on PROBLEMS below.

Step 4:
	make install

    Step 4 will install the executables and libraries.

Step 5:
	make distclean

    Step 5 will revert the source tree to the state prior to Step 1.  If
you just want to get rid of object files and local executables use
"make clean" instead.


SOLVING CONFIGURATION AND COMPILATION PROBLEMS

The configure script might not be able to guess the correct compiler
and compiler flags to use.  For example, we have noticed that use of
the -pedantic flag to the GNU-C++ compiler causes compilation errors 
on some systems (e.g. SunOS 4.1.3) due to system include files with
incorrect ANSI function prototypes.

You can set environment variables to initialize configure before it is 
called (before Step 2 above):

  Set environment variable CXX to the name of your C++ compiler
  Set environment variable CXXFLAGS to the compile flags of your C++ compiler. 
  Set environment variable LDFLAGS to your linker flags.
  Set environment variable CPPFLAGS to you preprocessor flags.

You do not need to specify all the above environment variables since 
the default settings are sensible for most unix compilers. 

If the configure script fails you may have to change
the configuration settings in the config directory. See the
config/docs directory for more information.

Have fun.

Andrew Hewett, Andreas Barth, Marco Eichelberg
April 30, 1996, Kuratorium OFFIS e.V., Oldenburg, Germany.

