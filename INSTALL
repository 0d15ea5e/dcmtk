
DICOM TOOLKIT (DCMTK) INSTALLATION

PRE-REQUISITES

The DICOM ToolKit (DCMTK) needs to be compiled with a C++ compiler.
We recommend using the GNU-C++ compiler in versions higher than 2.7
(most of the development was done using GNU-C++ 2.7.2.2 on Solaris 2.5.1).
The software is also known to compile using the SUNPro C++ compiler,  the
IBM C Set++ compiler and the Microsoft Visual C++ compiler.

Compatibility with other C++ compilers is unknown, however, we have
tried to keep language demands to a minimum (newer C++ features such
as ANSI C++ Library, Exceptions and RTTI have been avoided).

You will need around 70Mb of disk space to compile all the software.

SUPPORTED SYSTEMS

- Windows

The DCMTK software can be compiled under a native Windows95/NT environment.
More information and a sample project makefile for Microsoft Visual C++ 4.0
can be found in the dcmtk/config/systems/win32 directory.

    Windows95     / Intel x86 / Microsoft Visual C++ 4.0
    WindowsNT 4.0 / Intel x86 / Microsoft Visual C++ 4.0

- Unix (or lookalikes)

The DCMTK software has, at one time or the other, successfully compiled 
under the following  operating system / hardware / compiler combinations 
using the instructions given below:

    Solaris 2.5.1 / Sun Sparc / Gnu gcc 2.7.2.2
    Solaris 2.5.1 / Sun Sparc / Sun SC 2.0.1 (SunPro C++ 3.0.1)
    Solaris 2.5.1 / Sun Sparc / SunPro CC 4.2
    SunOS 4.1.3   / Sun Sparc / Gnu gcc 2.7.2
    Linux 2.0.25  / Intel x86 / Gnu gcc 2.7.2.1
    NeXTStep 3.3  / Intel x86 / NeXT/Gnu gcc 2.5.8 
    OSF/1 3.2     / DEC Alpha / Gnu gcc 2.7.2
    Ultrix 4.4    / DECstation MIPS / Gnu gcc 2.7.2
    HP-UX 9.05    / HP PA 1.1 / Gnu gcc 2.7.2.1
    WindowsNT 4.0 / Intel x86 / Cygnus GNU-Win32 b18 (Unix shell & dev tools)

Please Note: Due to resource limitations it is not practical for us to 
ensure that the newest release of DCMTK is problem free under all the 
above combinations.  Earlier releases are known to compile.  However it 
is always possible that an enhancement or bug fix breaks something on 
one of the above systems.  Our main development environment is SUN 
Solaris 2.5.1 using GNU C++ 2.7.2.2 and DCMTK should always compile on 
this platform.

Furthermore, the DCMTK software has, at one time or another, 
been reported to compile on the following systems which are not
available to us for testing:

    AIX 2.x       / IBM 7011/220
    IRIX          / SGI Indy
 
Currently, the imagectn and wlistctn applications assume a Unix
environment (they are servers).  The ctndisp application requires
the X-Window System.  The Worklist WWW Scripts require an http server
and a perl interpreter.

BUILDING

GNU autoconf is used to configure the software for the hardware /
operating system you are using.  You do not need to obtain GNU 
autoconf to compile and install this software.  All the neccessary 
configure scripts are included in this distribution.  The configure 
scripts examine your system capabilities and automatically generate
include files and Makefiles.

Perform the following steps from the top level (dcmtk) directory
to compile and install the software:

Step 1:
	cd config
	./rootconf
	cd ..

    Step 1 generates a Makefile and a configure script in the 
top level dcmtk directory.

Step 2:
	./configure

    Step 2 executes the configure scripts in each subdirectory.  First
the system capabilities are examined and then Makefiles are generated.
By default, executables and libraries will be installed (in Step 4)
in the directory /usr/local/dicom in the bin and lib subdirectories.
If you wish to use another install prefix you can use the --prefix=<path>
flag to configure.  e.g., if you wish to install underneath your home
directory in ~/dicom/bin and ~/dicom/lib then you should start configure
as:
	./configure --prefix=$HOME/dicom

Step 3:
	make all

    Step 3 will build the libraries and executables.  If you run into 
problems see the section on PROBLEMS below.

Step 4:
	make install

    Step 4 will install the executables and data dictionary.  
If you also wish to install the libraries and include files then 
use the "make install-lib".

Step 5:
	make distclean

    Step 5 will revert the source tree to the state prior to Step 1.  If
you just want to get rid of object files and local executables use
"make clean" instead.


SOLVING CONFIGURATION AND COMPILATION PROBLEMS

The configure script might not be able to guess the correct compiler
and compiler flags to use.  For example, we have noticed that use of
the -pedantic flag to the GNU-C++ compiler causes compilation errors 
on some systems (e.g. SunOS 4.1.3) due to system include files with
incorrect ANSI function prototypes.

You can set environment variables to initialize configure before it is 
called (before Step 2 above):

  Set environment variable CXX to the name of your C++ compiler
  Set environment variable CXXFLAGS to the compile flags of your C++ compiler. 
  Set environment variable LDFLAGS to your linker flags.
  Set environment variable CPPFLAGS to you preprocessor flags.

You do not need to specify all the above environment variables since 
the default settings are sensible for most unix compilers. 

If the configure script fails you may have to change
the configuration settings in the config directory. See the
config/docs directory for more information.

See also the FAQ for more hints.

---------

Have fun.

Andrew Hewett, Andreas Barth, Marco Eichelberg
Kuratorium OFFIS e.V., Oldenburg, Germany.

Last revised: 97.09.12 (hewett).
