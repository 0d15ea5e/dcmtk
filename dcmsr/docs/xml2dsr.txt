
NAME

    xml2dsr


SYNOPSIS

    xml2dsr [options] xmlfile-in dsrfile-out


SUMMARY

The xml2dsr utility converts the contents of an XML (Extensible Markup
Language) document to DICOM Structured Reporting (SR) format (file format
or raw data set).  The XML Schema does not yet follow any standard format.
However, the dsr2xml application might be enhanced in this aspect in the
future (e. g. by supporting HL7/CDA - Clinical Document Architecture).

An appropriate XML file can be create using the dsr2xml tool (option +Xn
recommended to add XML namespace declaration to the root element).


USAGE

xml2dsr: Convert XML document to DICOM SR file
usage: xml2dsr [options] xmlfile-in dsrfile-out

parameters:
  xmlfile-in                    XML input filename to be converted (stdin: "-")
  dsrfile-out                   DICOM SR output filename

general options:
  -h     --help                 print this help text and exit
         --version              print version information and exit
  -v     --verbose              verbose mode, print processing details
  -d     --debug                debug mode, print debug information
processing options:
  validation:
    +Vs  --validate-schema      validate XML document against Schema
    +Vn  --check-namespace      check XML namespace in document root
output options:
  output file format:
    +F   --write-file           write file format (default)
    -F   --write-dataset        write data set without file meta information
  output transfer syntax:
    +te  --write-xfer-little    write with explicit VR little endian TS (def.)
    +tb  --write-xfer-big       write with explicit VR big endian TS
    +ti  --write-xfer-implicit  write with implicit VR little endian TS
  post-1993 value representations:
    +u   --enable-new-vr        enable support for new VRs (UN/UT) (default)
    -u   --disable-new-vr       disable support for new VRs, convert to OB
  group length encoding:
    +g=  --group-length-recalc  recalculate group lengths if present (default)
    +g   --group-length-create  always write with group length elements
    -g   --group-length-remove  always write without group length elements
  length encoding in sequences and items:
    +e   --length-explicit      write with explicit lengths (default)
    -e   --length-undefined     write with undefined lengths
  data set trailing padding (not with --write-dataset):
    -p=  --padding-retain       do not change padding
                                (default if not --write-dataset)
    -p   --padding-off          no padding (implicit if --write-dataset)
    +p   --padding-create       [f]ile-pad [i]tem-pad: integer
                                align file on multiple of f bytes
                                and items on multiple of i bytes


DICOM CONFORMANCE

The xml2dsr utility supports the following SOP Classes (according to
DICOM 2003):

    BasicTextSR                 "1.2.840.10008.5.1.4.1.1.88.11"
    EnhancedSR                  "1.2.840.10008.5.1.4.1.1.88.22"
    ComprehensiveSR             "1.2.840.10008.5.1.4.1.1.88.33"
    MammographyCadSR            "1.2.840.10008.5.1.4.1.1.88.50"
    KeyObjectSelectionDocument  "1.2.840.10008.5.1.4.1.1.88.59"
    ChestCADSR                  "1.2.840.10008.5.1.4.1.1.88.65"


COMMAND LINE

All command line tools use the following notation for parameters: square
brackets enclose optional values (0-1), three trailing dots indicate that
multiple values are allowed (1-n), a combination of both means 0 to n values.

Command line options are distinguished from parameters by a leading '+' or '-'
sign, respectively.  Usually, order and position of command line options are
arbitrary (i.e. they can appear anywhere).  However, if options are mutually
exclusive the rightmost appearance is used.  This behaviour conforms to the
standard evaluation rules of common Unix shells.

In addition, one or more command files can be specified using an '@' sign as
a prefix to the filename (e.g. "@command.txt").  Such a command argument is
replaced by the content of the corresponding text file (multiple whitespaces
are treated as a single separator) prior to any further evaluation.  Please
note that a command file cannot contain another command file.
This simple but effective approach allows to summarize common combinations of
options/parameters and avoids longish and confusing command lines (an example
is provided in file dcmdata/apps/dumppat.txt).


ENVIRONMENT

The xml2dsr utility will attempt to load DICOM data dictionaries specified in
the DCMDICTPATH environment variable.  By default, i. e. if the DCMDICTPATH
environment variable is not set, the file /usr/local/dicom/lib/dicom.dic (in
fact the PREFIX as defined during configure is used) will be loaded unless the
dictionary is built into the application (default for Windows).

The default behaviour should be preferred and the DCMDICTPATH environment
variable only used when alternative data dictionaries are required.  The
DCMDICTPATH environment variable has the same format as the Unix shell PATH
variable in that a colon (":") separates entries.  The data dictionary code
will attempt to load each file specified in the DCMDICTPATH environment
variable.  It is an error if no data dictionary can be loaded.
