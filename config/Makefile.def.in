#
# Makefile.def.in for all toolkit code
# The use of the following code requires:
#	(a) definition of srcdir
#	(b) definition of VPATH without using any Makefile variables (optional)
#	(c) definition of LOCALDEFS an LOCALDEBUG (optional)
#

exec_prefix = @exec_prefix@
prefix = @prefix@

INSTALL= @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@

bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib
includedir=$(prefix)/include
mandir = $(prefix)/man
datadir = $(prefix)/data


#
# Definition of dependencies file
#

DEP=Makefile.dep

# Toolkit wide definitions for DEBUGGING
#	
#	DEBUG					Compile with/without DEBUG-Code
#

DEBUG = -DDEBUG


#
# Global definitions
#

GLOBALDEFS = @DEFS@

# 
# ARCH defines special machine archtecture compiler settings (e.g. -arch i386 on 
# NeXT
#

# ARCH= 

CC= @CC@
CFLAGS= @CFLAGS@
CXX= @CXX@
CXXFLAGS= @CXXFLAGS@
CPPFLAGS= @CPPFLAGS@
LDFLAGS= @LDFLAGS@ 
RANLIB= @RANLIB@
AR= @AR@
ARFLAGS= @ARFLAGS@
LIBS= @LIBS@

#
#	for clean and distclean
#
TRASH= *~ "\#*\#" *.bak core
DISTTRASH= $(TRASH) Makefile Makefile.def config.h config.cache config.log config.status 

includes= -I. -I$(srcdir) -I$(top_srcdir)/include -I$(configdir)/include $(LOCALINCLUDES)
defines= $(GLOBALDEFS) $(LOCALDEFS) $(DEBUG) $(LOCALDEBUG)


.SUFFIXES:
.SUFFIXES: .o .cc .c .h

.cc.o:
	$(CXX)	$(defines) -c $(includes) $(ARCH) \
		$(CPPFLAGS) $(CXXFLAGS) $< 

.c.o:
	$(CC) $($defines) -c $(includes) $(ARCH) \
		$(CPPFLAGS) $(CFLAGS) $<



