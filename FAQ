DCMTK FAQ - Frequently Asked Questions

----
1998.07.25

Q: I want to use DCMTK on Unixware. Is there anything I should know about?

A: Yes, we received many useful remarks about compiling DCMTK on Unixware from
   Wolfgang Rapp <w1.rapp@von.ulm.de>.
   
   1. If you want your Unixware binaries to run on all Unixware 2.x systems,
      you should compile on Unixware 2.0.x. Compiling on 2.1.x will result in
      binaries that are not backwards compatible with 2.0.x.
   2. The following lines will configure DCMTK for Unixware and the standard CC
      (the examples are for csh, change appropriately for use with sh):
        setenv LD_RUN_PATH /opt/lib
        setenv CFLAGS   -I/usr/include -I/opt/include -I/usr/X/include -I/usr/ucbinclude 
        setenv CPPFLAGS -I/usr/include -I/opt/include -I/usr/X/include -I/usr/ucbinclude
        setenv LIBS -L/opt/lib -lsocket -lnsl -L/usr/ucblib -lucb
        ./configure
   3. Configure may be unable to find the system functions memcmp, memcpy and memset.
      You should make sure that the file config/include/config.h, which is created
      during the configure process, contains:
        #define HAVE_MEMCMP 1
        #define HAVE_MEMCPY 1
        #define HAVE_MEMSET 1
   4. The Makefiles generated by configure require GNU Make. This is available for Unixware
      in pkgadd format at ftp://ftp.freebird.org/

   And here some comments for more advanced users:
   -  DCMTK on Unixware requires some BSD functions from /usr/ucblib/libucb.a
      and some include files from /usr/ucbinclude. At least on Unixware 2.0.3
      you should be careful because readdir() in libucb.a is known to be defective
      and there are conflicts between the /usr/include and /usr/ucbinclude versions 
      of stdio.h, unistd.h and strings.h
   -  All versions of libtool for Unixware (at least up to version 1.2) are unable
      to generate shared libraries. A patch for libtool is available on request
      from Wolfgang Rapp <w1.rapp@von.ulm.de>.

----
1998.07.24

Q: When I run the "imagectn" application on my UNIX system, it seems to put
   image files in /tmp instead of the directory specified as the storage area
   in my "configrc" file, although the "index.dat" file does get put there. Is
   there anything I might be doing wrong ?

A: Imagectn uses the tempnam(3S) system call to create the filename
   for an image file to be stored in the database. tempnam() will use
   /tmp as target directory if
   - the target directory (from configrc) does not exist
   - imagectn has no write access rights to the target directory
   - you have an environment variable TMPDIR pointing to /tmp
   - you are running imagectn as root 
   
   We generally recommend not to run imagectn as root. If you want imagectn
   to listen on port 104, change the owner of the imagectn binary to "root"
   and the access rights to 4755 (s-bit mode). This will allow imagectn to
   open the socket with super-user rights and then switch to the "safe"
   user ID of the calling user.

----
1998.07.24

Q: How can I create the DCMTK libraries as shared objects (.so-files)
   which are dynamically loaded when the DCMTK applications are started? 

A: This depends on your C++ compiler and operating system. 
   When building shared objects containing C++ code, 
   special handling for templates and ctors/dtors
   of global variables is required. Therefore, on most systems the
   shared object must be created with the C++ compiler, not with "ld".

   If you are using gcc on a platform where the "-shared" flag is supported, 
   the following steps will create a 'dynamic' DCMTK:
   1. run rootconf and configure (see the INSTALL file).
   2. edit the file 'config/Makefile.def' to include the following settings:
      CFLAGS= -fPIC -O2
      CXXFLAGS= -fPIC -O2
      AR= gcc
      ARFLAGS= -shared -o
      LIBEXT= so
   3. build and install the toolkit with "make", "make install" 
      and "make install-lib".
   4. make sure that the environment variable LD_LIBRARY_PATH
      contains the directory where the DCMTK shared objects are installed.

----
1998.06.29

Q: I am trying to compile DCMTK on a HP-UX 10 machine with the HP C++ compiler.
   Compilation fails with the error message
   "CC: sorry, not implemented: cannot expand value-returning inline ... 
   with call of non-value-returning inline ..."

A: You should use the compiler options "+d +a1" to prevent the
   HP compiler from attempting to inline code.
   Before using "configure", you might type:
     setenv CXX "CC +d +a1"
   
   Reported by Shashikala Duraiswami <shash@alexis.com>.
   
----
1998.01.27

Q: I am trying to compile DCMTK on a SGI IRIX 6.x machine with gcc 2.7.2.
   The configure script terminates with the following error messsage:

     checking whether the C compiler (gcc  ) works... no
     configure: error: installation or configuration problem:
     C compiler cannot create executables.

   The dcmtk/config/config.log file contains:

     configure:747: gcc -o conftest    conftest.c  1>&5
     collect2: ld returned 1 exit status
     ld: Segmentation fault.  Removing output file...

A: You use a gcc compiled on a SGI IRIX 5.x machine.
   On IRIX 6.x the -old_ld must be specified on all compiler
   calls which involve linking. The flag must be specified before
   any -o option. We have created a shell script which 
   patches "configure" to allow the -old_ld option to work. 
   In the dcmtk directory, type:
     config/mvldflags config/configure
     setenv LDFLAGS -old_ld
   After that, configure will create appropriate Makefiles.

----
1998.01.27

Q: I am compiling DCMTK on a SGI IRIX 6.x machine, and I receive
   many warnings of the type

     /usr/bin/ld: 
     The shared object /usr/lib/libsocket.so did not resolve any symbols.
     You may want to remove it from your link line.

A: On some IRIX machines, the BSD socket functions are contained both
   in the libnsl/libsocket libraries and in libc. You can ignore the warnings
   (they will do no harm) or remove "-lsocket -lnsl" from the "LIBS=..." line
   in config/Makefile.def after the configure process.

----
1997.10.01

Q: I am trying to compile DCMTK on Solaris with Sun Workshop 4.x.
   The code compiles without problems, but when trying to link
   applications, the linker reports unresolved externals 
   in the DCMTK libraries and fails. 

A: The Sun Workshop 4.x compilers use a new method of handling
   C++ template classes which requires that all libraries (lib*.a)
   containing templates must be created by the C++ compiler
   and not by "ar". Therefore, *before* executing the configure
   script for dcmtk, you should set environment variables as follows:
     setenv CC cc
     setenv CXX CC
     setenv AR CC
     setenv ARFLAGS "-xar -o"
   Configure will then create the appropriate code in the Makefiles.

----
1997.09.16

Q: The INSTALL file says that DCMTK can be compiled using the Cygnus 
   GNU-Win32 development environment for Windows95/NT.  However, Step 2 
   of the install instructions does not work because the configure script 
   fails completely (it reports "permission denied" problems and generates
   strange files in all the sub-directories).

A: You need to make sure that your PATH environment variable is set up
   so that the GNU-Win32 tools directory will be searched before the 
   standard windows locations (e.g. \WINNT\..) when when executing a 
   program.  The main problem is that the DCMTK configure scripts use
   the Unix-like "find" program whereas Windows has its own, incompatible,
   "find" program.  Unless you arrange otherwise, the wrong "find" program
   will be used.

----
1997.09.16

Q: I've compiled DCMTK using the Cygnus GNU-Win32 development environment
   for Windows95/NT but some of the programs behave strangely.

A: At the time of writing the Cygnus GNU-Win32 development environment is
   beta code and may not correctly emulate all Unix features.  In particular,
   we know that the imagectn application does not currently work because
   of problems with file locking.  We have not done any extensive testing in
   this environment but thought that it might be very useful to easily and
   cheaply use the storescu and storescp program on Windows95/NT.
   If this version is interesting for you or if you find any other problems 
   please let us know.  

----
1997.09.12

Q: All of the programs print the message 
   "Warning: no data dictionary loaded, check environment variable: 
   DCMDICTPATH" then seem to produce strange results.  

A: The DICOM data dictionary could not be loaded.  It has probably
   not been properly installed.  The default location for this file 
   (under Unix) is /usr/local/dicom/lib/dicom.dic but an
   alternive location can be specified by using the DCMDICTPATH
   environment variable.  
   See the documentation file dcmtk/dcmdata/doc/datadict.txt for more
   details about using DICOM data dictionaries.

----
1997.09.12

Q: All of the programs load a data dictionary from the text file
   /usr/local/dicom/lib/dicom.dic before they can do anything.  The 
   overhead for this flexibility is very high.  I want my programs
   to start much faster.

A: You can use a built-in in data dictionary instead.
   The code for this already exists (dcmtk/dcmdata/libsrc/dcdictzz.cc)
   and can be regenerated at any time by (see the dcmdata library Makefile:
   dcmtk/dcmdata/libsrc/Makefile.in).  You can even have the best of both
   worlds and have the main data dictionary built-in with additions loaded
   from text files (via the DCMDICTPATH environment variable).  

   See the documentation file dcmtk/dcmdata/doc/datadict.txt for more
   details about using DICOM data dictionaries.

   The example Visual C++ project makefiles for the Windows95/NT 
   platform already use the built-in data dictionary code.  

----
1997.08.26

Q: Does DCMTK compile on Microsoft Windows NT/95 ?

A: Yes.  We have added support for Win32 environments.
   Look at the README file and the Microsoft Visual C++ makefile
   in the dcmtk/config/systems/win32 directory for instructions on
   how to compile under Windows NT/95.

   Please note, there are no normal Windows applications in DCMTK.  The
   apps programs only run in a Windows DOS box.

----
1997.05.30

Q: I'm using a Nextstep system.  I run the configure script but it claims
   that my compiler is a cross-compiler (produces the message: 'checking 
   whether cross-compiling... yes') and produces nonsense results.

A: Your compiler seems to be producing code which cannot always be executed.
   There seems to be a problem with the C++ name demangler causing the 
   linker to occasionally generate bad code.  This problem occurs most 
   frequently when the using NFS file-systems.  A workaround (at least for 
   Nextstep 3.3 Developer) is to modify the shell script /bin/ld++ and remove 
   the pipe to the c++filt program.  /bin/ld++ then just contains a call to 
   the linker (i.e. ld $*).  

----
1997.05.22

Q: I'm using a unix system.  I run the configure script and then make but
   the build stops because the file 'config/Makefile.def' could not be found.

A: This means that the configure script has failed to create the
   necessary makefile definitions.  There could be several reasons for this.
   Look at the output of the configure program.  If you see a line like:

	checking whether cross-compiling... yes

   then your compiler seems to be producing code which cannot be executed.
   You could be using a very old compiler or some (shared) libraries could
   not be located.  It has been reported that some GNU C++ installations
   install shared libraries in non-standard places (e.g. /opt/gnu/lib)
   and that environment variables must be set before the compiler can be
   used (e.g. the LD_LIBRARY_PATH environment variable).  


----
1996.09.24

Q: Does DCMTK compile on Apple Macintosh ?

A: Yes.  Parts (dcmdata and dcmnet) compile using the Metrowerks
   CodeWarrior C++ compiler.  

   No real testing has yet been done.

   You will also need an appropriate version of GUSI (Grand Unified 
   Socket Interface) which is a socket implementation for Macintosh.
   This is can be obtained via 
        http://www.iis.ee.ethz.ch/~neeri/macintosh/gusi-qa.html

   You need to set appropriate include paths (e.g. dcmtk/dcmnet/include, 
   dcmtk/dcmdata/include, dcmtk/config/include, .../GUSI/include)

   If you need an example project file, please ask.

   Please note, there are no normal Macintosh applications in DCMTK.  You
   have to use a simulated Unix command line interface (via the
   CodeWarrior SIOUX library).

----
1996.09.24

Q: Where is rest of the documentation?

A: All of the available DCMTK documentation is distributed in
   the DCMTK package.  There is documentation about how to configure
   and run the programs.  What is missing is documentation about
   how to use the libraries.  Currently, the only way to learn how
   to use the libraries is to look at the example programs and
   do things the same way.  Hopefully, some documentation will be
   written in the future and financial contributions would certainly 
   reduce the waiting considerably.

----
1996.09.24

Q: None of the programs do anything, they all crash as soon
   as they get started!

A: We have received reports of configuration problems relating
   to a GNU C++ library libiostream.a.  This library was part
   of older (pre 2.7 ??) releases and is incompatible with newer
   versions of the GNU C++ library.  It seems that when installing
   a newer version of the GNU C++ library the old libiostream.a
   library does not get removed.  If our configuration scripts
   find this library then it will be used.  

   The problem manifests itself by causing any compiled program
   to immediately crash as soon as it tries to do any C++ streams
   based I/O.

   A workaround is to remove or rename the libiostream.a library.  
   Alternatively, you can edit the file dcmtk/config/Makefile.def 
   after install Step 2 (running the configure script) and remove 
   any reference to -liostream.a

----
